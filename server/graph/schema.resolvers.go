package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"log"

	"github.com/eeritvan/calendar-server/graph/model"
	"github.com/google/uuid"
)

// CreateCalEvent is the resolver for the createCalEvent field.
func (r *mutationResolver) CreateCalEvent(ctx context.Context, input model.CalEventInput) (*model.CalEvent, error) {
	// todo: better refactor

	var event model.CalEvent
	if err := r.DB.QueryRow(ctx, `
		INSERT INTO events (name, description, start_time, end_time)
		VALUES ($1, $2, $3, $4)
		RETURNING id, name, description, start_time, end_time
	`, input.Name, input.Description, input.StartTime, input.EndTime).Scan(
		&event.ID,
		&event.Name,
		&event.Description,
		&event.StartTime,
		&event.EndTime,
	); err != nil {
		log.Printf("%v", err)
		// todo: better error handling
		return nil, err
	}
	return &event, nil
}

// DeleteCalEvent is the resolver for the deleteCalEvent field.
func (r *mutationResolver) DeleteCalEvent(ctx context.Context, input uuid.UUID) (bool, error) {
	// panic(fmt.Errorf("not implemented: DeleteCalEvent - deleteCalEvent"))
	if _, err := r.DB.Exec(ctx, `
		DELETE FROM events
		WHERE id = $1
	`, input); err != nil {
		log.Printf("%v", err)
		return false, err
	}
	return true, nil
}

// AllEvents is the resolver for the allEvents field.
func (r *queryResolver) AllEvents(ctx context.Context) ([]*model.CalEvent, error) {
	// todo: better refactor
	rows, err := r.DB.Query(ctx, `
		SELECT id, name, description, start_time, end_time
		FROM events
	`)

	if err != nil {
		return nil, err
	}

	var events []*model.CalEvent
	for rows.Next() {
		var event model.CalEvent
		if err := rows.Scan(
			&event.ID,
			&event.Name,
			&event.Description,
			&event.StartTime,
			&event.EndTime,
		); err != nil {
			return nil, err
		}
		events = append(events, &event)
	}
	if err = rows.Err(); err != nil {
		// todo: better error handling
		return nil, err
	}

	return events, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
