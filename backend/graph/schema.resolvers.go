package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/eeritvan/calendar/graph/model"
	"github.com/eeritvan/calendar/internal/events"
	"github.com/google/uuid"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.EventInput) (*model.Event, error) {
	event, err := events.DB_CreateEvent(ctx, r.DB, input)
	if err != nil {
		return nil, err
	}

	return event, nil
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, id uuid.UUID, input model.UpdateEventInput) (*model.Event, error) {
	event, err := events.DB_UpdateEvent(ctx, r.DB, id, input)
	if err != nil {
		return nil, err
	}

	return event, nil
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id uuid.UUID) (bool, error) {
	result, err := events.DB_DeleteEvent(ctx, r.DB, id)
	if err != nil {
		return false, err
	}

	return result, nil
}

// AllEvents is the resolver for the allEvents field.
func (r *queryResolver) AllEvents(ctx context.Context) ([]*model.Event, error) {
	events, err := events.DB_getAllEvents(ctx, r.DB)
	if err != nil {
		return nil, err
	}

	return events, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
