package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/eeritvan/calendar/graph/model"
	db "github.com/eeritvan/calendar/internal/db/sqlc"
	"github.com/google/uuid"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.EventInput) (*model.Event, error) {
	event, err := r.Queries.CreateEvent(ctx, db.CreateEventParams(input))
	if err != nil {
		return nil, err
	}

	return (*model.Event)(&event), nil
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, id uuid.UUID, input model.UpdateEventInput) (*model.Event, error) {
	event, err := r.Queries.UpdateEvent(ctx, db.UpdateEventParams{
		ID:          id,
		Name:        input.Name,
		Description: input.Description,
		StartTime:   input.StartTime,
		EndTime:     input.EndTime,
	})
	if err != nil {
		// todo: better error handling
		return nil, err
	}

	return (*model.Event)(&event), nil
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.Queries.DeleteEvent(ctx, id)
	if err != nil {
		// todo: better error handling
		return false, err
	}
	return true, nil
}

// AllEvents is the resolver for the allEvents field.
func (r *queryResolver) AllEvents(ctx context.Context) ([]*model.Event, error) {
	events, err := r.Queries.ListEvents(ctx)
	if err != nil {
		// todo: better error handling
		return nil, err
	}

	modelEvents := make([]*model.Event, len(events))
	for i := range events {
		modelEvents[i] = (*model.Event)(&events[i])
	}

	return modelEvents, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
